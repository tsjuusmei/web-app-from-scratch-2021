{"version":3,"sources":["webpack://Navigo.amd/./src/constants.ts","webpack://Navigo.amd/./src/utils.ts","webpack://Navigo.amd/./src/Q.ts","webpack://Navigo.amd/./src/middlewares/setLocationPath.ts","webpack://Navigo.amd/./src/middlewares/matchPathToRegisteredRoutes.ts","webpack://Navigo.amd/./src/middlewares/checkForDeprecationMethods.ts","webpack://Navigo.amd/./src/middlewares/checkForForceOp.ts","webpack://Navigo.amd/./src/middlewares/updateBrowserURL.ts","webpack://Navigo.amd/./src/middlewares/checkForLeaveHook.ts","webpack://Navigo.amd/./src/middlewares/updateState.ts","webpack://Navigo.amd/./src/lifecycles.ts","webpack://Navigo.amd/./src/middlewares/checkForAlreadyHook.ts","webpack://Navigo.amd/./src/middlewares/checkForBeforeHook.ts","webpack://Navigo.amd/./src/middlewares/callHandler.ts","webpack://Navigo.amd/./src/middlewares/checkForAfterHook.ts","webpack://Navigo.amd/./src/middlewares/checkForNotFoundHandler.ts","webpack://Navigo.amd/./src/middlewares/errorOut.ts","webpack://Navigo.amd/./src/middlewares/flushCurrent.ts","webpack://Navigo.amd/./src/middlewares/processMatches.ts","webpack://Navigo.amd/./src/middlewares/waitingList.ts","webpack://Navigo.amd/./src/index.ts","webpack://Navigo.amd/webpack/bootstrap","webpack://Navigo.amd/webpack/startup","webpack://Navigo.amd/webpack/runtime/define property getters","webpack://Navigo.amd/webpack/runtime/hasOwnProperty shorthand"],"names":["PARAMETER_REGEXP","WILDCARD_REGEXP","NOT_SURE_REGEXP","getCurrentEnvURL","fallback","windowAvailable","location","pathname","search","hash","clean","s","replace","isString","extractHashFromURL","url","indexOf","split","pop","extractGETParameters","tmp","slice","join","parseQuery","queryString","query","pairs","i","length","pair","key","decodeURIComponent","Array","isArray","push","matchRoute","context","route","pattern","currentLocationPath","current","GETParams","params","paramNames","path","full","dots","name","hashString","to","data","regexp","RegExp","match","names","reduce","value","index","regExpResultToParams","groups","pushStateAvailable","window","history","pushState","undefinedOrTrue","obj","accumulateHooks","hooks","result","filter","h","forEach","type","Q","funcs","c","done","idx","next","splice","moveForward","setLocationPath","instance","root","_checkForAHash","matchPathToRegisteredRoutes","routes","matches","resolveOptions","strategy","checkForDeprecationMethods","navigateOptions","console","warn","checkForForceOp","force","_setCurrent","_pathToMatchObject","if","condition","one","two","isWindowAvailable","isPushStateAvailable","updateBrowserURL","isItUsingHash","historyAPIMethod","stateObj","title","__freezeListening","setTimeout","href","checkForLeaveHook","lastResolved","map","oldMatch","_","leaveLoopDone","leave","runHook","newLocationVSOldMatch","matchLocation","find","f","d","undefined","concat","updateState","foundLifecycle","already","before","handler","updatePageLinks","after","notFoundLifeCycle","notFoundRoute","_notFoundRoute","notFoundHandled","notFoundMatch","noMatchWarning","processMatches","nextMatch","waitingList","__dirty","__waiting","shift","Navigo","appRoute","genericHooks","DEFAULT_RESOLVE_OPTIONS","self","this","destroyed","composePathWithRoot","createRoute","String","resolve","options","navigate","call","document","querySelectorAll","link","getAttribute","hasListenerAttached","navigoHandler","e","ctrlKey","metaKey","target","tagName","toLowerCase","URL","u","err","source","str","temp","v","parseNavigateOptions","preventDefault","stopPropagation","addEventListener","removeEventListener","generate","r","pathToMatchObject","addHook","func","getRoute","nameOrHandler","on","Object","keys","p","uses","as","off","what","navigateByName","destroy","__popstateListener","notFound","getLinkPath","currentLocation","getCurrentLocation","addBeforeHook","bind","addAfterHook","addAlreadyHook","addLeaveHook","_clean","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","definition","o","defineProperty","enumerable","get","prop","prototype","hasOwnProperty"],"mappings":"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","file":"navigo.amd.min.js","sourcesContent":["export const PARAMETER_REGEXP = /([:*])(\\w+)/g;\nexport const REPLACE_VARIABLE_REGEXP = \"([^/]+)\";\nexport const WILDCARD_REGEXP = /\\*/g;\nexport const REPLACE_WILDCARD = \"?(?:.*)\";\nexport const NOT_SURE_REGEXP = /\\/\\?/g;\nexport const REPLACE_NOT_SURE = \"/?([^/]+|)\";\nexport const START_BY_SLASH_REGEXP = \"(?:/^|^)\";\nexport const MATCH_REGEXP_FLAGS = \"\";\n","import {\n  RouteHooksStorage,\n  Match,\n  Route,\n  NavigateOptions,\n  ResolveOptions,\n  QContext,\n  ResolveStrategy,\n} from \"../index\";\n\nimport {\n  PARAMETER_REGEXP,\n  WILDCARD_REGEXP,\n  REPLACE_VARIABLE_REGEXP,\n  REPLACE_WILDCARD,\n  START_BY_SLASH_REGEXP,\n  MATCH_REGEXP_FLAGS,\n  REPLACE_NOT_SURE,\n  NOT_SURE_REGEXP,\n} from \"./constants\";\n\nexport function getCurrentEnvURL(fallback = \"/\"): string {\n  if (windowAvailable()) {\n    return location.pathname + location.search + location.hash;\n  }\n  return fallback;\n}\nexport function clean(s: string) {\n  return s.replace(/\\/+$/, \"\").replace(/^\\/+/, \"\");\n}\nexport function isString(s: any): boolean {\n  return typeof s === \"string\";\n}\nexport function isFunction(s: any): boolean {\n  return typeof s === \"function\";\n}\nexport function extractHashFromURL(url: string) {\n  if (url && url.indexOf(\"#\") >= 0) {\n    return url.split(\"#\").pop() || \"\";\n  }\n  return \"\";\n}\nexport function regExpResultToParams(match, names: string[]) {\n  if (names.length === 0) return null;\n  if (!match) return null;\n  return match.slice(1, match.length).reduce((params, value, index) => {\n    if (params === null) params = {};\n    params[names[index]] = decodeURIComponent(value);\n    return params;\n  }, null);\n}\nexport function extractGETParameters(url: string) {\n  const tmp = clean(url).split(/\\?(.*)?$/);\n  return [clean(tmp[0]), tmp.slice(1).join(\"\")];\n}\nexport function parseQuery(queryString: string): Object {\n  var query = {};\n  var pairs = queryString.split(\"&\");\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i].split(\"=\");\n    if (pair[0] !== \"\") {\n      let key = decodeURIComponent(pair[0]);\n      if (!query[key]) {\n        query[key] = decodeURIComponent(pair[1] || \"\");\n      } else {\n        if (!Array.isArray(query[key])) query[key] = [query[key]];\n        query[key].push(decodeURIComponent(pair[1] || \"\"));\n      }\n    }\n  }\n  return query;\n}\nexport function matchRoute(context: QContext, route: Route): false | Match {\n  const [current, GETParams] = extractGETParameters(\n    clean(context.currentLocationPath)\n  );\n  const params = GETParams === \"\" ? null : parseQuery(GETParams);\n  const paramNames = [];\n  let pattern;\n  if (isString(route.path)) {\n    pattern =\n      START_BY_SLASH_REGEXP +\n      clean(route.path as string)\n        .replace(PARAMETER_REGEXP, function (full, dots, name) {\n          paramNames.push(name);\n          return REPLACE_VARIABLE_REGEXP;\n        })\n        .replace(WILDCARD_REGEXP, REPLACE_WILDCARD)\n        .replace(NOT_SURE_REGEXP, REPLACE_NOT_SURE) +\n      \"$\";\n    if (clean(route.path as string) === \"\") {\n      if (clean(current) === \"\") {\n        return {\n          url: current,\n          queryString: GETParams,\n          hashString: extractHashFromURL(context.to),\n          route: route,\n          data: null,\n          params,\n        };\n      }\n    }\n  } else {\n    pattern = route.path;\n  }\n  const regexp = new RegExp(pattern, MATCH_REGEXP_FLAGS);\n  const match = current.match(regexp);\n\n  if (match) {\n    const data = isString(route.path)\n      ? regExpResultToParams(match, paramNames)\n      : match.groups\n      ? match.groups\n      : match.slice(1);\n    return {\n      url: current,\n      queryString: GETParams,\n      hashString: extractHashFromURL(context.to),\n      route: route,\n      data,\n      params,\n    };\n  }\n  return false;\n}\nexport function pushStateAvailable(): boolean {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.history &&\n    window.history.pushState\n  );\n}\nexport function undefinedOrTrue(obj, key: string): boolean {\n  return typeof obj[key] === \"undefined\" || obj[key] === true;\n}\nexport function parseNavigateOptions(source?: string): NavigateOptions {\n  if (!source) return {};\n  const pairs = source.split(\",\");\n  const options: NavigateOptions = {};\n  let resolveOptions: ResolveOptions;\n\n  pairs.forEach((str) => {\n    const temp = str.split(\":\").map((v) => v.replace(/(^ +| +$)/g, \"\"));\n    switch (temp[0]) {\n      case \"historyAPIMethod\":\n        options.historyAPIMethod = temp[1];\n        break;\n      case \"resolveOptionsStrategy\":\n        if (!resolveOptions) resolveOptions = {};\n        resolveOptions.strategy = temp[1] as ResolveStrategy;\n        break;\n      case \"resolveOptionsHash\":\n        if (!resolveOptions) resolveOptions = {};\n        resolveOptions.hash = temp[1] === \"true\";\n        break;\n      case \"updateBrowserURL\":\n      case \"callHandler\":\n      case \"updateState\":\n      case \"force\":\n        options[temp[0]] = temp[1] === \"true\";\n        break;\n    }\n  });\n  if (resolveOptions) {\n    options.resolveOptions = resolveOptions;\n  }\n  return options;\n}\nexport function windowAvailable() {\n  return typeof window !== \"undefined\";\n}\nexport function accumulateHooks(\n  hooks = [],\n  result: RouteHooksStorage = {}\n): RouteHooksStorage {\n  hooks\n    .filter((h) => h)\n    .forEach((h) => {\n      [\"before\", \"after\", \"already\", \"leave\"].forEach((type) => {\n        if (h[type]) {\n          if (!result[type]) result[type] = [];\n          result[type].push(h[type]);\n        }\n      });\n    });\n  return result as RouteHooksStorage;\n}\n","type QChild = {\n  type: \"child\";\n  funcs: Array<Function | Array<any> | QChild>;\n};\n\nexport default function Q(\n  funcs: Array<Function | Array<any> | QChild>,\n  c?: any,\n  done?: Function\n) {\n  const context = c || {};\n  let idx = 0;\n\n  (function next() {\n    if (!funcs[idx]) {\n      if (done) {\n        done(context);\n      }\n      return;\n    }\n    if (Array.isArray(funcs[idx])) {\n      funcs.splice(\n        idx,\n        1,\n        ...(funcs[idx][0](context) ? funcs[idx][1] : funcs[idx][2])\n      );\n      next();\n    } else {\n      // console.log(funcs[idx].name + \" / \" + JSON.stringify(context));\n      // console.log(funcs[idx].name);\n      (funcs[idx] as Function)(context, (moveForward) => {\n        if (typeof moveForward === \"undefined\" || moveForward === true) {\n          idx += 1;\n          next();\n        } else if (done) {\n          done(context);\n        }\n      });\n    }\n  })();\n}\n\nQ.if = function (condition: Function, one, two) {\n  if (!Array.isArray(one)) one = [one];\n  if (!Array.isArray(two)) two = [two];\n  return [condition, one, two];\n};\n","import { QContext } from \"../../index\";\nimport { getCurrentEnvURL } from \"../utils\";\n\nexport default function setLocationPath(context: QContext, done) {\n  if (typeof context.currentLocationPath === \"undefined\") {\n    context.currentLocationPath = context.to = getCurrentEnvURL(\n      context.instance.root\n    );\n  }\n  context.currentLocationPath = context.instance._checkForAHash(\n    context.currentLocationPath\n  );\n  done();\n}\n","import { matchRoute } from \"../utils\";\nimport { QContext, Match } from \"../../index\";\n\nexport default function matchPathToRegisteredRoutes(context: QContext, done) {\n  for (let i = 0; i < context.instance.routes.length; i++) {\n    const route = context.instance.routes[i];\n    const match: false | Match = matchRoute(context, route);\n    if (match) {\n      if (!context.matches) context.matches = [];\n      context.matches.push(match);\n      if (context.resolveOptions.strategy === \"ONE\") {\n        done();\n        return;\n      }\n    }\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function checkForDeprecationMethods(context: QContext, done) {\n  if (context.navigateOptions) {\n    if (typeof context.navigateOptions[\"shouldResolve\"] !== \"undefined\") {\n      console.warn(\n        `\"shouldResolve\" is deprecated. Please check the documentation.`\n      );\n    }\n    if (typeof context.navigateOptions[\"silent\"] !== \"undefined\") {\n      console.warn(`\"silent\" is deprecated. Please check the documentation.`);\n    }\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function checkForForceOp(context: QContext, done) {\n  if (context.navigateOptions.force === true) {\n    context.instance._setCurrent([\n      context.instance._pathToMatchObject(context.to),\n    ]);\n    done(false);\n  } else {\n    done();\n  }\n}\n","import { undefinedOrTrue, pushStateAvailable, windowAvailable } from \"../utils\";\nimport { QContext } from \"../../index\";\n\nconst isWindowAvailable = windowAvailable();\nconst isPushStateAvailable = pushStateAvailable();\n\nexport default function updateBrowserURL(context: QContext, done) {\n  if (undefinedOrTrue(context.navigateOptions, \"updateBrowserURL\")) {\n    const value = `/${context.to}`.replace(/\\/\\//g, \"/\"); // making sure that we don't have two slashes\n    const isItUsingHash =\n      isWindowAvailable &&\n      context.resolveOptions &&\n      context.resolveOptions.hash === true;\n    if (isPushStateAvailable) {\n      history[context.navigateOptions.historyAPIMethod || \"pushState\"](\n        context.navigateOptions.stateObj || {},\n        context.navigateOptions.title || \"\",\n        isItUsingHash ? `#${value}` : value\n      );\n      // This is to solve a nasty bug where the page doesn't scroll to the anchor.\n      // We set a microtask to update the hash only.\n      if (location && location.hash) {\n        context.instance.__freezeListening = true;\n        setTimeout(() => {\n          let tmp = location.hash;\n          location.hash = \"\";\n          location.hash = tmp;\n          context.instance.__freezeListening = false;\n        }, 1);\n      }\n    } else if (isWindowAvailable) {\n      window.location.href = context.to;\n    }\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\nimport Q from \"../Q\";\nimport { undefinedOrTrue } from \"../utils\";\n\nexport default function checkForLeaveHook(context: QContext, done) {\n  const instance = context.instance;\n  if (!instance.lastResolved()) {\n    done();\n    return;\n  }\n  Q(\n    instance.lastResolved().map((oldMatch) => {\n      return (_, leaveLoopDone) => {\n        // no leave hook\n        if (!oldMatch.route.hooks || !oldMatch.route.hooks.leave) {\n          leaveLoopDone();\n          return;\n        }\n        let runHook = false;\n        const newLocationVSOldMatch = context.instance.matchLocation(\n          oldMatch.route.path,\n          context.currentLocationPath\n        );\n        if (oldMatch.route.path !== \"*\") {\n          runHook = !newLocationVSOldMatch;\n        } else {\n          const someOfTheLastOnesMatch = context.matches\n            ? context.matches.find((match) => {\n                return oldMatch.route.path === match.route.path;\n              })\n            : false;\n          runHook = !someOfTheLastOnesMatch;\n        }\n        if (undefinedOrTrue(context.navigateOptions, \"callHooks\") && runHook) {\n          Q(\n            oldMatch.route.hooks.leave\n              .map((f) => {\n                // just so we match the Q interface\n                return (_, d) =>\n                  f(\n                    d,\n                    context.matches && context.matches.length > 0\n                      ? context.matches.length === 1\n                        ? context.matches[0]\n                        : context.matches\n                      : undefined\n                  );\n              })\n              .concat([() => leaveLoopDone()])\n          );\n          return;\n        } else {\n          leaveLoopDone();\n        }\n      };\n    }),\n    {},\n    () => done()\n  );\n}\n","import { QContext } from \"../../index\";\nimport { undefinedOrTrue } from \"../utils\";\n\nexport default function updateState(context: QContext, done) {\n  if (undefinedOrTrue(context.navigateOptions, \"updateState\")) {\n    context.instance._setCurrent(context.matches);\n  }\n  done();\n}\n","import { QContext } from \"../index\";\nimport Q from \"./Q\";\nimport checkForLeaveHook from \"./middlewares/checkForLeaveHook\";\nimport checkForBeforeHook from \"./middlewares/checkForBeforeHook\";\nimport callHandler from \"./middlewares/callHandler\";\nimport checkForAfterHook from \"./middlewares/checkForAfterHook\";\nimport checkForAlreadyHook from \"./middlewares/checkForAlreadyHook\";\nimport checkForNotFoundHandler from \"./middlewares/checkForNotFoundHandler\";\nimport errorOut from \"./middlewares/errorOut\";\nimport flushCurrent from \"./middlewares/flushCurrent\";\nimport updateState from \"./middlewares/updateState\";\n\nexport const foundLifecycle = [\n  checkForAlreadyHook,\n  checkForBeforeHook,\n  callHandler,\n  checkForAfterHook,\n];\n\nexport const notFoundLifeCycle = [\n  checkForLeaveHook,\n  checkForNotFoundHandler,\n  Q.if(\n    ({ notFoundHandled }: QContext) => notFoundHandled,\n    foundLifecycle.concat([updateState]),\n    [errorOut, flushCurrent]\n  ),\n];\n","import { QContext } from \"../../index\";\nimport { undefinedOrTrue } from \"../utils\";\n\nexport default function checkForAlreadyHook(context: QContext, done) {\n  const current = context.instance.lastResolved();\n  if (\n    current &&\n    current[0] &&\n    current[0].route === context.match.route &&\n    current[0].url === context.match.url &&\n    current[0].queryString === context.match.queryString\n  ) {\n    current.forEach((c) => {\n      if (c.route.hooks && c.route.hooks.already) {\n        if (undefinedOrTrue(context.navigateOptions, \"callHooks\")) {\n          c.route.hooks.already.forEach((f) => f(context.match));\n        }\n      }\n    });\n    done(false);\n    return;\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\nimport Q from \"../Q\";\nimport { undefinedOrTrue } from \"../utils\";\n\nexport default function checkForBeforeHook(context: QContext, done) {\n  if (\n    context.match.route.hooks &&\n    context.match.route.hooks.before &&\n    undefinedOrTrue(context.navigateOptions, \"callHooks\")\n  ) {\n    Q(\n      context.match.route.hooks.before\n        .map((f) => {\n          // just so we match the Q interface\n          return function beforeHookInternal(_, d) {\n            return f(d, context.match);\n          };\n        })\n        .concat([() => done()])\n    );\n  } else {\n    done();\n  }\n}\n","import { QContext } from \"../../index\";\nimport { undefinedOrTrue } from \"../utils\";\n\nexport default function callHandler(context: QContext, done) {\n  if (undefinedOrTrue(context.navigateOptions, \"callHandler\")) {\n    context.match.route.handler(context.match);\n  }\n  context.instance.updatePageLinks();\n  done();\n}\n","import { QContext } from \"../../index\";\nimport { undefinedOrTrue } from \"../utils\";\n\nexport default function checkForAfterHook(context: QContext, done) {\n  if (\n    context.match.route.hooks &&\n    context.match.route.hooks.after &&\n    undefinedOrTrue(context.navigateOptions, \"callHooks\")\n  ) {\n    context.match.route.hooks.after.forEach((f) => f(context.match));\n  }\n  done();\n}\n","import { QContext, Match } from \"../../index\";\nimport {\n  parseQuery,\n  extractGETParameters,\n  clean,\n  extractHashFromURL,\n} from \"../utils\";\n\nexport default function checkForNotFoundHandler(context: QContext, done) {\n  const notFoundRoute = context.instance._notFoundRoute;\n  if (notFoundRoute) {\n    context.notFoundHandled = true;\n    const [url, queryString] = extractGETParameters(\n      context.currentLocationPath\n    );\n    const hashString = extractHashFromURL(context.to);\n    notFoundRoute.path = clean(url);\n    const notFoundMatch: Match = {\n      url: notFoundRoute.path,\n      queryString,\n      hashString,\n      data: null,\n      route: notFoundRoute,\n      params: queryString !== \"\" ? parseQuery(queryString) : null,\n    };\n    context.matches = [notFoundMatch];\n    context.match = notFoundMatch;\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function errorOut(context: QContext, done) {\n  if (\n    !context.resolveOptions ||\n    context.resolveOptions.noMatchWarning === false ||\n    typeof context.resolveOptions.noMatchWarning === \"undefined\"\n  )\n    console.warn(\n      `Navigo: \"${context.currentLocationPath}\" didn't match any of the registered routes.`\n    );\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function flushCurrent(context: QContext, done) {\n  context.instance._setCurrent(null);\n  done();\n}\n","import { QContext } from \"../../index\";\nimport Q from \"../Q\";\nimport { foundLifecycle } from \"../lifecycles\";\nimport updateState from \"./updateState\";\nimport checkForLeaveHook from \"./checkForLeaveHook\";\n\nexport default function processMatches(context: QContext, done) {\n  let idx = 0;\n  function nextMatch() {\n    if (idx === context.matches.length) {\n      updateState(context, done);\n      return;\n    }\n    Q(\n      foundLifecycle,\n      { ...context, match: context.matches[idx] },\n      function end() {\n        idx += 1;\n        nextMatch();\n      }\n    );\n  }\n  checkForLeaveHook(context, nextMatch);\n}\n","import { QContext } from \"../../index\";\n\nexport default function waitingList(context: QContext) {\n  context.instance.__dirty = false;\n  if (context.instance.__waiting.length > 0) {\n    context.instance.__waiting.shift()();\n  }\n}\n","import {\n  Match,\n  Route,\n  RouteHooks,\n  QContext,\n  NavigateOptions,\n  ResolveOptions,\n} from \"../index\";\nimport NavigoRouter from \"../index\";\nimport {\n  pushStateAvailable,\n  matchRoute,\n  parseQuery,\n  extractGETParameters,\n  isFunction,\n  isString,\n  clean,\n  parseNavigateOptions,\n  windowAvailable,\n  getCurrentEnvURL,\n  accumulateHooks,\n  extractHashFromURL,\n} from \"./utils\";\nimport Q from \"./Q\";\nimport setLocationPath from \"./middlewares/setLocationPath\";\nimport matchPathToRegisteredRoutes from \"./middlewares/matchPathToRegisteredRoutes\";\nimport checkForDeprecationMethods from \"./middlewares/checkForDeprecationMethods\";\nimport checkForForceOp from \"./middlewares/checkForForceOp\";\nimport updateBrowserURL from \"./middlewares/updateBrowserURL\";\nimport processMatches from \"./middlewares/processMatches\";\nimport waitingList from \"./middlewares/waitingList\";\n\nimport { notFoundLifeCycle } from \"./lifecycles\";\n\nexport default function Navigo(\n  appRoute?: string,\n  resolveOptions?: ResolveOptions\n) {\n  let DEFAULT_RESOLVE_OPTIONS: ResolveOptions = resolveOptions || {\n    strategy: \"ONE\",\n    hash: false,\n    noMatchWarning: false,\n  };\n  let self: NavigoRouter = this;\n  let root = \"/\";\n  let current: Match[] = null;\n  let routes: Route[] = [];\n  let destroyed = false;\n  let genericHooks: RouteHooks;\n\n  const isPushStateAvailable = pushStateAvailable();\n  const isWindowAvailable = windowAvailable();\n\n  if (!appRoute) {\n    console.warn(\n      'Navigo requires a root path in its constructor. If not provided will use \"/\" as default.'\n    );\n  } else {\n    root = clean(appRoute);\n  }\n\n  function _checkForAHash(url: string): string {\n    if (url.indexOf(\"#\") >= 0) {\n      if (DEFAULT_RESOLVE_OPTIONS.hash === true) {\n        url = url.split(\"#\")[1] || \"/\";\n      } else {\n        url = url.split(\"#\")[0];\n      }\n    }\n    return url;\n  }\n  function composePathWithRoot(path: string) {\n    return clean(`${root}/${clean(path)}`);\n  }\n  function createRoute(\n    path: string | RegExp,\n    handler: Function,\n    hooks: RouteHooks[],\n    name?: string\n  ): Route {\n    path = isString(path) ? composePathWithRoot(path as string) : path;\n    return {\n      name: name || clean(String(path)),\n      path,\n      handler,\n      hooks: accumulateHooks(hooks),\n    };\n  }\n\n  // public APIs\n  function on(\n    path: string | Function | Object | RegExp,\n    handler?: Function,\n    hooks?: RouteHooks\n  ) {\n    if (typeof path === \"object\" && !(path instanceof RegExp)) {\n      Object.keys(path).forEach((p) => {\n        if (typeof path[p] === \"function\") {\n          this.on(p, path[p]);\n        } else {\n          const { uses: handler, as: name, hooks } = path[p];\n          routes.push(createRoute(p, handler, [genericHooks, hooks], name));\n        }\n      });\n      return this;\n    } else if (typeof path === \"function\") {\n      hooks = handler as RouteHooks;\n      handler = path as Function;\n      path = root;\n    }\n    routes.push(\n      createRoute(path as string | RegExp, handler, [genericHooks, hooks])\n    );\n    return this;\n  }\n  function resolve(to?: string, options?: ResolveOptions): false | Match[] {\n    if (self.__dirty) {\n      self.__waiting.push(() => self.resolve(to, options));\n      return;\n    } else {\n      self.__dirty = true;\n    }\n    to = to ? `${clean(root)}/${clean(to)}` : undefined;\n    // console.log(\"-- resolve --> \" + to, self.__dirty);\n    const context: QContext = {\n      instance: self,\n      to,\n      currentLocationPath: to,\n      navigateOptions: {},\n      resolveOptions: { ...DEFAULT_RESOLVE_OPTIONS, ...options },\n    };\n    Q(\n      [\n        setLocationPath,\n        matchPathToRegisteredRoutes,\n        Q.if(\n          ({ matches }: QContext) => matches && matches.length > 0,\n          processMatches,\n          notFoundLifeCycle\n        ),\n      ],\n      context,\n      waitingList\n    );\n\n    return context.matches ? context.matches : false;\n  }\n  function navigate(to: string, navigateOptions?: NavigateOptions): void {\n    if (self.__dirty) {\n      self.__waiting.push(() => self.navigate(to, navigateOptions));\n      return;\n    } else {\n      self.__dirty = true;\n    }\n    to = `${clean(root)}/${clean(to)}`;\n    // console.log(\"-- navigate --> \" + to, self.__dirty);\n    const context: QContext = {\n      instance: self,\n      to,\n      navigateOptions: navigateOptions || {},\n      resolveOptions:\n        navigateOptions && navigateOptions.resolveOptions\n          ? navigateOptions.resolveOptions\n          : DEFAULT_RESOLVE_OPTIONS,\n      currentLocationPath: _checkForAHash(to),\n    };\n    Q(\n      [\n        checkForDeprecationMethods,\n        checkForForceOp,\n        matchPathToRegisteredRoutes,\n        Q.if(\n          ({ matches }: QContext) => matches && matches.length > 0,\n          processMatches,\n          notFoundLifeCycle\n        ),\n        updateBrowserURL,\n        waitingList,\n      ],\n      context,\n      waitingList\n    );\n  }\n  function navigateByName(\n    name: string,\n    data?: Object,\n    options?: NavigateOptions\n  ): boolean {\n    const url = generate(name, data);\n    if (url !== null) {\n      navigate(url, options);\n      return true;\n    }\n    return false;\n  }\n  function off(what: string | RegExp | Function) {\n    this.routes = routes = routes.filter((r) => {\n      if (isString(what)) {\n        return clean(r.path as string) !== clean(what as string);\n      } else if (isFunction(what)) {\n        return what !== r.handler;\n      }\n      return String(r.path) !== String(what);\n    });\n    return this;\n  }\n  function listen() {\n    if (isPushStateAvailable) {\n      this.__popstateListener = () => {\n        if (!self.__freezeListening) {\n          resolve();\n        }\n      };\n      window.addEventListener(\"popstate\", this.__popstateListener);\n    }\n  }\n  function destroy() {\n    this.routes = routes = [];\n    if (isPushStateAvailable) {\n      window.removeEventListener(\"popstate\", this.__popstateListener);\n    }\n    this.destroyed = destroyed = true;\n  }\n  function notFound(handler, hooks?: RouteHooks) {\n    self._notFoundRoute = createRoute(\n      \"*\",\n      handler,\n      [genericHooks, hooks],\n      \"__NOT_FOUND__\"\n    );\n    return this;\n  }\n  function updatePageLinks() {\n    if (!isWindowAvailable) return;\n    findLinks().forEach((link) => {\n      if (\n        \"false\" === link.getAttribute(\"data-navigo\") ||\n        \"_blank\" === link.getAttribute(\"target\")\n      ) {\n        if (link.hasListenerAttached) {\n          link.removeEventListener(\"click\", link.navigoHandler);\n        }\n        return;\n      }\n      if (!link.hasListenerAttached) {\n        link.hasListenerAttached = true;\n        link.navigoHandler = function (e) {\n          if (\n            (e.ctrlKey || e.metaKey) &&\n            e.target.tagName.toLowerCase() === \"a\"\n          ) {\n            return false;\n          }\n          let location = link.getAttribute(\"href\");\n          if (typeof location === \"undefined\" || location === null) {\n            return false;\n          }\n          // handling absolute paths\n          if (location.match(/^(http|https)/) && typeof URL !== \"undefined\") {\n            try {\n              const u = new URL(location);\n              location = u.pathname + u.search;\n            } catch (err) {}\n          }\n          const options = parseNavigateOptions(\n            link.getAttribute(\"data-navigo-options\")\n          );\n\n          if (!destroyed) {\n            e.preventDefault();\n            e.stopPropagation();\n            self.navigate(clean(location), options);\n          }\n        };\n        link.addEventListener(\"click\", link.navigoHandler);\n      }\n    });\n    return self;\n  }\n  function findLinks() {\n    if (isWindowAvailable) {\n      return [].slice.call(document.querySelectorAll(\"[data-navigo]\"));\n    }\n    return [];\n  }\n  function link(path: string) {\n    return `/${root}/${clean(path)}`;\n  }\n  function setGenericHooks(hooks: RouteHooks) {\n    genericHooks = hooks;\n    return this;\n  }\n  function lastResolved(): Match[] | null {\n    return current;\n  }\n  function generate(name: string, data?: Object): string {\n    const route = routes.find((r) => r.name === name);\n    if (route) {\n      let result = route.path as string;\n      if (data) {\n        for (let key in data) {\n          result = result.replace(\":\" + key, data[key]);\n        }\n      }\n      return !result.match(/^\\//) ? `/${result}` : result;\n    }\n    return null;\n  }\n  function getLinkPath(link) {\n    return link.getAttribute(\"href\");\n  }\n  function pathToMatchObject(path: string): Match {\n    const [url, queryString] = extractGETParameters(clean(path));\n    const params = queryString === \"\" ? null : parseQuery(queryString);\n    const hashString = extractHashFromURL(path);\n    const route = createRoute(url, () => {}, [genericHooks], url);\n    return {\n      url,\n      queryString,\n      hashString,\n      route,\n      data: null,\n      params: params,\n    };\n  }\n  function getCurrentLocation(): Match {\n    return pathToMatchObject(\n      clean(getCurrentEnvURL(root)).replace(new RegExp(`^${root}`), \"\")\n    );\n  }\n  function directMatchWithRegisteredRoutes(path: string): false | Match[] {\n    const context: QContext = {\n      instance: self,\n      currentLocationPath: path,\n      to: path,\n      navigateOptions: {},\n      resolveOptions: DEFAULT_RESOLVE_OPTIONS,\n    };\n    matchPathToRegisteredRoutes(context, () => {});\n    return context.matches ? context.matches : false;\n  }\n  function directMatchWithLocation(\n    path: string | RegExp,\n    currentLocation?: string\n  ): false | Match {\n    const context: QContext = {\n      instance: self,\n      to: currentLocation,\n      currentLocationPath: currentLocation,\n    };\n    setLocationPath(context, () => {});\n    if (typeof path === \"string\") {\n      path = clean(path);\n    }\n    const match = matchRoute(context, {\n      name: String(path),\n      path,\n      handler: () => {},\n      hooks: {},\n    });\n    return match ? match : false;\n  }\n  function addHook(\n    type: string,\n    route: Route | string,\n    func: Function\n  ): Function {\n    if (typeof route === \"string\") {\n      route = getRoute(route);\n    }\n    if (route) {\n      if (!route.hooks[type]) route.hooks[type] = [];\n      route.hooks[type].push(func);\n      return () => {\n        (route as Route).hooks[type] = (route as Route).hooks[type].filter(\n          (f) => f !== func\n        );\n      };\n    } else {\n      console.warn(`Route doesn't exists: ${route}`);\n    }\n    return () => {};\n  }\n  function getRoute(nameOrHandler: string | Function): Route | undefined {\n    if (typeof nameOrHandler === \"string\") {\n      return routes.find((r) => r.name === composePathWithRoot(nameOrHandler));\n    }\n    return routes.find((r) => r.handler === nameOrHandler);\n  }\n\n  this.root = root;\n  this.routes = routes;\n  this.destroyed = destroyed;\n  this.current = current;\n  this.__freezeListening = false;\n  this.__waiting = [];\n  this.__dirty = false;\n\n  this.on = on;\n  this.off = off;\n  this.resolve = resolve;\n  this.navigate = navigate;\n  this.navigateByName = navigateByName;\n  this.destroy = destroy;\n  this.notFound = notFound;\n  this.updatePageLinks = updatePageLinks;\n  this.link = link;\n  this.hooks = setGenericHooks;\n  this.extractGETParameters = (url) =>\n    extractGETParameters(_checkForAHash(url));\n  this.lastResolved = lastResolved;\n  this.generate = generate;\n  this.getLinkPath = getLinkPath;\n  this.match = directMatchWithRegisteredRoutes;\n  this.matchLocation = directMatchWithLocation;\n  this.getCurrentLocation = getCurrentLocation;\n  this.addBeforeHook = addHook.bind(this, \"before\");\n  this.addAfterHook = addHook.bind(this, \"after\");\n  this.addAlreadyHook = addHook.bind(this, \"already\");\n  this.addLeaveHook = addHook.bind(this, \"leave\");\n  this.getRoute = getRoute;\n  this._pathToMatchObject = pathToMatchObject;\n  this._clean = clean;\n  this._checkForAHash = _checkForAHash;\n  this._setCurrent = (c) => (current = self.current = c);\n\n  listen.call(this);\n  updatePageLinks.call(this);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(407);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)"],"sourceRoot":""}